/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sigmav.view.veiculo;

import java.awt.Color;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import sigmav.view.peca.PecaCad;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import sigmav.entity.Manutencao;
import sigmav.entity.Veiculo;
import sigmav.hibernate.HDaoVeiculo;

/**
 *
 * @author meritor
 */
public class ManCad extends javax.swing.JDialog {

    /**
     * Creates new form ManCad
     */
    java.awt.Frame parent;
    boolean modal;
    private Manutencao manInt;
    private Veiculo veiInt;
    private StringBuilder listaErros;
    
//------------------------------------------------------------------------------
    // Adiciona nova manutencao:
    public ManCad(java.awt.Frame parent, boolean modal, Veiculo veiculoExterno) {
        super(parent, modal);
        initComponents();
        setTitle("Sigmav - Manutenções:");
        setLocationRelativeTo(null);
        
        this.parent = parent;
        this.modal = modal;
        
        this.manInt = new Manutencao();
        this.veiInt = veiculoExterno;
        
    }
    
    
    // Altera manutencao:
    public ManCad(java.awt.Frame parent, boolean modal, Veiculo veiculoExterno, Manutencao manExternaEscolhida) {
        super(parent, modal);
        initComponents();
        setTitle("Sigmav - Manutenções:");
        setLocationRelativeTo(null);
        
        this.parent = parent;
        this.modal = modal;
        
        this.manInt = manExternaEscolhida;
        this.veiInt = veiculoExterno;
        
        //----------------------------------------------------------------------
        jTextFieldQuilometragem.setText(String.valueOf(this.manInt.getQuilometragem()));
        
        SimpleDateFormat formatador = new SimpleDateFormat("dd/MM/yyyy");
        jTextFieldDataManutencao.setText(formatador.format(this.manInt.getDataManutencao()));
        
        jTextFieldDescricao.setText(this.manInt.getDescriçao());
        
        DecimalFormat df = new DecimalFormat("#.00");  
        jTextFieldCusto.setText(df.format(this.manInt.getCustoManutencao()).replaceAll( ",", "." ));
        
    }
    
    // Construtor std:
    public ManCad(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setTitle("Sigmav - Manutenções:");
        setLocationRelativeTo(null);
        
        this.parent = parent;
        this.modal = modal;
    }
//------------------------------------------------------------------------------
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldQuilometragem = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldDataManutencao = new javax.swing.JTextField();
        jTextFieldDescricao = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldCusto = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButtonSalvar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(300, 244));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        jLabel1.setText("Cadastrar/Alterar");

        jLabel2.setText("Quilometragem*:");

        jLabel3.setText("Data manutenção*:");

        jLabel4.setText("Descrição*:");

        jLabel5.setText("Custo*:");

        jButtonSalvar.setText("Salvar");
        jButtonSalvar.setToolTipText("Salvar");
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });

        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.setToolTipText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 17, Short.MAX_VALUE))
                            .addComponent(jTextFieldQuilometragem))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldDataManutencao)))
                    .addComponent(jTextFieldDescricao)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextFieldCusto, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButtonSalvar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonCancelar)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldQuilometragem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldDataManutencao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCusto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSalvar)
                    .addComponent(jButtonCancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed
        if(validar()){
            try{
                Date dia = null;
                dia = new SimpleDateFormat("dd/MM/yyyy").parse(jTextFieldDataManutencao.getText().trim());

                this.manInt.setQuilometragem(Integer.parseInt(jTextFieldQuilometragem.getText().trim()));
                this.manInt.setDataManutencao(dia);
                this.manInt.setDescriçao(jTextFieldDescricao.getText().trim());
                
                this.manInt.setCustoManutencao(Float.parseFloat(jTextFieldCusto.getText().trim().replaceAll( "//.", "," )));
                
                if(this.manInt.getId() == 0){
                    this.veiInt.getManutencoes().add(this.manInt);
                }            

                new HDaoVeiculo().persist(veiInt);
            
            } catch (Exception ex){
                Logger.getLogger(PecaCad.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                JOptionPane.showMessageDialog(parent, "Manutenção salva com sucesso.", "Salvar", 1, null);                        
                dispose();
            }
        } else {
            JOptionPane.showMessageDialog(parent, this.listaErros, "Salvar",2,null);
        }
    }//GEN-LAST:event_jButtonSalvarActionPerformed

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManCad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManCad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManCad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManCad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ManCad dialog = new ManCad(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    private boolean validar(){
        this.listaErros = new StringBuilder();
        
        //Validar quilometragem
        if(jTextFieldQuilometragem.getText().trim().length() < 1){
            jTextFieldQuilometragem.setBackground(Color.ORANGE);
            listaErros.append("# O Campo 'Quilometragem' é obrigatório. \n");
        } else {
            if(isNumber(jTextFieldQuilometragem.getText().trim())){
                jTextFieldQuilometragem.setBackground(Color.WHITE);
            } else {
                jTextFieldQuilometragem.setBackground(Color.ORANGE);
                listaErros.append("# O Campo 'Quilometragem' permite apenas números inteiros positivos. \n");
            }
        }
        
        //----------------------------------------------------------------------
        //VALIDAR DESCRIÇÃO
        if(jTextFieldDescricao.getText().trim().length() < 4){
            jTextFieldDescricao.setBackground(Color.orange);
            listaErros.append("# O Campo 'Descrição' é obrigatório, mínimo de 4 caracteres \n");
        } else {
            if(jTextFieldDescricao.getText().trim().length() > 100){
                jTextFieldDescricao.setBackground(Color.orange);
                listaErros.append("# O Campo 'Descrição' excedeu a quantidade máxima de caracteres (100). \n");
            } else {
                jTextFieldDescricao.setBackground(Color.white);
            }
        }
        
        //----------------------------------------------------------------------
        //VALIDAR DATA        
        if(jTextFieldDataManutencao.getText().trim().length() < 1){
            jTextFieldDataManutencao.setBackground(Color.orange);
            listaErros.append("# O Campo 'Data da manutenção' é obrigatório. \n");
        } else {
            if(!isdatta(jTextFieldDataManutencao.getText().trim()) || jTextFieldDataManutencao.getText().trim().length() != 10){
                jTextFieldDataManutencao.setBackground(Color.orange);
                listaErros.append("# O Campo 'Data da manutenção' está incorreto, ex: dd/mm/aaaa. \n");
            } else {
                if(jTextFieldDataManutencao.getText().trim().charAt(2) != (char) 47 || jTextFieldDataManutencao.getText().trim().charAt(5) != (char) 47){
                    jTextFieldDataManutencao.setBackground(Color.orange);
                    listaErros.append("# O Campo 'Data da manutenção' está incorreto, ex: dd/mm/aaaa. \n");
                } else {
                    try {
                        if(!isDattaVal(jTextFieldDataManutencao.getText().trim())){
                            jTextFieldDataManutencao.setBackground(Color.orange);
                            listaErros.append("# O Campo 'Data da manutenção' está incorreto, digite uma data válida menor ou igual o dia de hoje. \n");
                        } else {
                            jTextFieldDescricao.setBackground(Color.white);                    
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(ManCad.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }            
        }
        //----------------------------------------------------------------------
        //Validar custo
        if(jTextFieldCusto.getText().trim().length() < 1){
            jTextFieldCusto.setBackground(Color.orange);
            listaErros.append("# O Campo 'Custo' é obrigatório. \n");
            
        } else {
            if(!isCusto(jTextFieldCusto.getText().trim())){
                jTextFieldCusto.setBackground(Color.orange);
                listaErros.append("# O Campo 'Custo' esta incorreto, ex: 0.00 \n");
            } else {
                jTextFieldCusto.setBackground(Color.white);
            }
        }
        
        //----------------------------------------------------------------------
        
            
        if(listaErros.length() == 0){
                return true;
        }
                
        return false;
    }
    
    private boolean isCusto(String auxs){
        char[] vauxs = auxs.toCharArray();
        char[] pogs = new char[auxs.length()];
        int poggs = 0;
        boolean flag = true;
        float aux2 = 0;
        
        for ( int i = vauxs.length - 1; i >= 0; i-- ){            
            pogs[poggs] = vauxs[i];
            poggs++;            
        }
        
        for ( int i = 0; i < pogs.length; i++ ){            
            if ( !Character.isDigit( pogs[ i ] ) ){
                if(i == 2){                    
                    flag = true;
                    
                    if(pogs[i] != (char) 46){
                        flag = false;
                        break;
                    }
                    
                } else {
                    flag = false;                    
                    break;
                    
                }    
            }       
        }
        /*
        for(float tx : pogs){
            System.out.println(tx);
        }
        */
        
        if(flag == true){
            aux2 = Float.valueOf(auxs);
            
            if(aux2 < 0){
                flag = false;
            }
        }
        
        return flag;
    }
    
    private boolean isNumber(String axus){
        char[] vauxs = axus.toCharArray();
        boolean flag = true;
        int aux2 = 0;
            
        for ( int i = 0; i < vauxs.length; i++ ){            
            if ( !Character.isDigit( vauxs[ i ] ) ){
                flag = false;                    
                break;
            }                
        }
        
        if(flag == true){
            aux2 = Integer.valueOf(axus);
            
            if(aux2 < 0){
                flag = false;
            }
        }
        
        
        return flag;
    }
    
    private boolean isdatta(String axus){
        char[] vauxs = axus.toCharArray();
        boolean flag = true;
        
        //System.out.println("################################################### \n");
        //System.out.println(axus);
        for ( int i = 0; i < vauxs.length; i++ ){            
            if ( !Character.isDigit( vauxs[ i ] ) ){                
                if(i == 2 || i == 5){                    
                    flag = true;
                } else {
                    flag = false;                    
                    break;
                }
            }
            //System.out.println(flag);
        }
        
        return flag;
    }
    
    private boolean isDattaVal(String axus) throws ParseException{
        Date dia = null;
        dia = new SimpleDateFormat("dd/MM/yyyy").parse(axus);
        
        Date dataAtual = new Date();
        
        int anDAt = dataAtual.getYear();
        int meDAt = dataAtual.getMonth();
        int diDAt = dataAtual.getDate();
        
        if(dia.getYear() > anDAt){
        
            return false;            
        } else {
            if(dia.getMonth() > 11) {               
                return false;
                
            } else {
                if(dia.getMonth() > meDAt && dia.getYear() == anDAt){
                    return false;    
                    
                } else {
                    if(dia.getDate()> 31){
                        return false;
                        
                    } else {                        
                        if(dia.getMonth() == 10 || dia.getMonth() == 8 || dia.getMonth() == 5 || dia.getMonth() == 3){
                            if(dia.getDate() > 30){
                                return false;

                            }                         
                        }               
                        if(dia.getMonth() == meDAt && dia.getDate() > diDAt){
                            return false;        
                            
                        } 
                    }
                }
            }
        }
        
        return true;
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jTextFieldCusto;
    private javax.swing.JTextField jTextFieldDataManutencao;
    private javax.swing.JTextField jTextFieldDescricao;
    private javax.swing.JTextField jTextFieldQuilometragem;
    // End of variables declaration//GEN-END:variables
}

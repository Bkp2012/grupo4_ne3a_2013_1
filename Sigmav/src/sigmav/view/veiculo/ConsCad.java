/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sigmav.view.veiculo;

import java.awt.Color;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import sigmav.view.fornecedor.FornCons;
import sigmav.view.peca.PecaCad;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import sigmav.entity.Consumo;
import sigmav.entity.Fornecedor;
import sigmav.entity.Veiculo;
import sigmav.hibernate.HDaoVeiculo;

/**
 *
 * @author meritor
 */
public class ConsCad extends javax.swing.JDialog {

    /**
     * Creates new form ConsCad
     */
    private java.awt.Frame parent;
    private boolean modal;    
    private Consumo consumo;
    private Veiculo veiculoInterno;
    private StringBuilder listaErros;
    Fornecedor localAbasticento;
    List<Fornecedor> listaPog;
        
    public ConsCad(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setTitle("Sigmav - Consumo:");
        setLocationRelativeTo(null);
        
        this.parent = parent;
        this.modal = modal;
        
        this.consumo = new Consumo();
        //this.localAbasticento = consumo.getLocal();
    }
    
    // NOVO CONSUMO CADASTRADO
    public ConsCad(java.awt.Frame parent, boolean modal, Veiculo veiculoExterno) {
        super(parent, modal);
        initComponents();
        setTitle("Sigmav - Consumo:");
        setLocationRelativeTo(null);
        
        this.parent = parent;
        this.modal = modal;
        
        this.veiculoInterno = veiculoExterno;
        
        this.consumo = new Consumo();
        this.consumo.setLocal(null);
        //this.localAbasticento = new Fornecedor();
        
        this.veiculoInterno.getConsumo().add(this.consumo);
        
        JOptionPane.showMessageDialog(parent, "Todos os campos do formulário são obrigatórios.", "Consumo", 1, null);
    }
    
    // Altera um consumo
    public ConsCad(java.awt.Frame parent, boolean modal, Veiculo veiculoExterno, Consumo consumoExternoEscolhido) {
        super(parent, modal);
        initComponents();
        setTitle("Sigmav - Consumo:");
        setLocationRelativeTo(null);
        
        this.parent = parent;
        this.modal = modal;
        
        //Aponta pra fora        
        this.veiculoInterno = veiculoExterno;
        this.consumo = consumoExternoEscolhido;
        this.localAbasticento = consumoExternoEscolhido.getLocal();
        
        jTextFieldCombustivel.setText(this.consumo.getCombustivel());
        
        SimpleDateFormat formatador = new SimpleDateFormat("dd/MM/yyyy");
        jTextFieldDataAbastecimento.setText(formatador.format(this.consumo.getDataAbastecimento()));
        
        DecimalFormat df = new DecimalFormat("#.00");  
        jTextFieldLitros.setText(df.format(this.consumo.getLitros()).replaceAll( ",", "." ));
        jTextFieldLocalAbastecimento.setText(this.localAbasticento.getNome());            
        jTextFieldPrecoLitro.setText(df.format(this.consumo.getPreco()).replaceAll( ",", "." ));
        jTextFieldQuilometragem.setText(String.valueOf(this.consumo.getQuilometragem()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldQuilometragem = new javax.swing.JTextField();
        jTextFieldDataAbastecimento = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldLitros = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldPrecoLitro = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldCombustivel = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldLocalAbastecimento = new javax.swing.JTextField();
        jButtonAlterarLocal = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jButtonCancelar = new javax.swing.JButton();
        jButtonSalvar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        jLabel1.setText("Cadastrar/Alterar");

        jLabel2.setText("Quilometragem:");

        jTextFieldQuilometragem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldQuilometragemActionPerformed(evt);
            }
        });

        jTextFieldDataAbastecimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDataAbastecimentoActionPerformed(evt);
            }
        });

        jLabel3.setText("Data abastecimento:");

        jTextFieldLitros.setMaximumSize(new java.awt.Dimension(129, 27));
        jTextFieldLitros.setMinimumSize(new java.awt.Dimension(129, 27));
        jTextFieldLitros.setPreferredSize(new java.awt.Dimension(129, 27));
        jTextFieldLitros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldLitrosActionPerformed(evt);
            }
        });

        jLabel4.setText("Litros:");

        jTextFieldPrecoLitro.setMaximumSize(new java.awt.Dimension(129, 27));
        jTextFieldPrecoLitro.setMinimumSize(new java.awt.Dimension(129, 27));
        jTextFieldPrecoLitro.setPreferredSize(new java.awt.Dimension(129, 27));
        jTextFieldPrecoLitro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPrecoLitroActionPerformed(evt);
            }
        });

        jLabel5.setText("Preço por litro:");

        jTextFieldCombustivel.setMaximumSize(new java.awt.Dimension(129, 27));
        jTextFieldCombustivel.setMinimumSize(new java.awt.Dimension(129, 27));
        jTextFieldCombustivel.setPreferredSize(new java.awt.Dimension(129, 27));
        jTextFieldCombustivel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCombustivelActionPerformed(evt);
            }
        });

        jLabel6.setText("Combustível:");

        jLabel7.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        jLabel7.setText("Local abastecimento:");

        jLabel8.setText("Nome:");

        jTextFieldLocalAbastecimento.setEditable(false);
        jTextFieldLocalAbastecimento.setBackground(new java.awt.Color(192, 192, 192));

        jButtonAlterarLocal.setText("Alterar local");
        jButtonAlterarLocal.setToolTipText("Alterar Local abastecimento");
        jButtonAlterarLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAlterarLocalActionPerformed(evt);
            }
        });

        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.setToolTipText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jButtonSalvar.setText("Salvar");
        jButtonSalvar.setToolTipText("Salvar");
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldLocalAbastecimento)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jTextFieldQuilometragem, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldDataAbastecimento)))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7))
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldLitros, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                            .addComponent(jTextFieldPrecoLitro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTextFieldCombustivel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonAlterarLocal, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButtonSalvar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonCancelar)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldQuilometragem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldDataAbastecimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldLitros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jTextFieldPrecoLitro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCombustivel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldLocalAbastecimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonAlterarLocal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancelar)
                    .addComponent(jButtonSalvar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldQuilometragemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldQuilometragemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldQuilometragemActionPerformed

    private void jTextFieldDataAbastecimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDataAbastecimentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDataAbastecimentoActionPerformed

    private void jTextFieldLitrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldLitrosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldLitrosActionPerformed

    private void jTextFieldPrecoLitroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPrecoLitroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPrecoLitroActionPerformed

    private void jTextFieldCombustivelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCombustivelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCombustivelActionPerformed

    private void jButtonAlterarLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAlterarLocalActionPerformed
        // TODO add your handling code here:
        //this.localAbasticento; = new Fornecedor();
        listaPog = new ArrayList();
        
        ConsultarFornecedor();
        if(this.listaPog.size() > 0){
            this.consumo.setLocal(this.listaPog.get(0));
        }
        jTextFieldLocalAbastecimento.setText(this.consumo.getLocal().getNome());
    }//GEN-LAST:event_jButtonAlterarLocalActionPerformed

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed
            
        if(validar()){
            try{
                Date dia = null;
                dia = new SimpleDateFormat("dd/MM/yyyy").parse(jTextFieldDataAbastecimento.getText().trim());

                this.consumo.setCombustivel(jTextFieldCombustivel.getText().trim());
                this.consumo.setDataAbastecimento(dia);
                this.consumo.setLitros(Float.parseFloat(jTextFieldLitros.getText().trim()));
                //this.consumo.setLocal(this.localAbasticento);
                this.consumo.setPreco(Float.parseFloat(jTextFieldPrecoLitro.getText().trim()));
                this.consumo.setQuilometragem(Integer.parseInt(jTextFieldQuilometragem.getText().toString()));
                
                
                new HDaoVeiculo().persist(this.veiculoInterno);
                
            } catch (Exception ex) {
                Logger.getLogger(PecaCad.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                
                JOptionPane.showMessageDialog(parent, "Abastecimento salvo com sucesso.", "Salvar", 1, null);                        
                dispose();
            }
            
        } else {
            JOptionPane.showMessageDialog(parent, this.listaErros, "Salvar",2,null);
        }
            

    }//GEN-LAST:event_jButtonSalvarActionPerformed

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        this.consumo = null;
        dispose();
        
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConsCad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConsCad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConsCad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsCad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ConsCad dialog = new ConsCad(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    private void ConsultarFornecedor(){
        FornCons tFornCons = new FornCons(this.parent, this.modal, (ArrayList<Fornecedor>) this.listaPog, true);
        tFornCons.setLocationRelativeTo(this);
        tFornCons.setResizable(false);
        tFornCons.setVisible(true);
               
    }
    
    //==========================================================================
    private boolean validar(){
        this.listaErros = new StringBuilder();
        
        //Validar quilometragem
        if(jTextFieldQuilometragem.getText().trim().length() < 1){
            jTextFieldQuilometragem.setBackground(Color.ORANGE);
            listaErros.append("# O Campo 'Quilometragem' é obrigatório. \n");
        } else {
            if(isNumber(jTextFieldQuilometragem.getText().trim())){
                jTextFieldQuilometragem.setBackground(Color.WHITE);
            } else {
                jTextFieldQuilometragem.setBackground(Color.ORANGE);
                listaErros.append("# O Campo 'Quilometragem' permite apenas números inteiros positivos. \n");
            }
        }
        
        //----------------------------------------------------------------------
        //VALIDAR Combustivel
        if(jTextFieldCombustivel.getText().trim().length() < 4){
            jTextFieldCombustivel.setBackground(Color.orange);
            listaErros.append("# O Campo 'Combustivel' é obrigatório, mínimo de 4 caracteres \n");
        } else {
            if(jTextFieldCombustivel.getText().trim().length() > 20){
                jTextFieldCombustivel.setBackground(Color.orange);
                listaErros.append("# O Campo 'Combustivel' excedeu a quantidade máxima de caracteres (20). \n");
            } else {
                jTextFieldCombustivel.setBackground(Color.white);
            }
        }
        
        //----------------------------------------------------------------------
        //VALIDAR DATA        
        if(jTextFieldDataAbastecimento.getText().trim().length() < 1){
            jTextFieldDataAbastecimento.setBackground(Color.orange);
            listaErros.append("# O Campo 'Data da manutenção' é obrigatório. \n");
        } else {
            if(!isdatta(jTextFieldDataAbastecimento.getText().trim()) || jTextFieldDataAbastecimento.getText().trim().length() != 10){
                jTextFieldDataAbastecimento.setBackground(Color.orange);
                listaErros.append("# O Campo 'Data da manutenção' está incorreto, ex: dd/mm/aaaa. \n");
            } else {
                if(jTextFieldDataAbastecimento.getText().trim().charAt(2) != (char) 47 || jTextFieldDataAbastecimento.getText().trim().charAt(5) != (char) 47){
                    jTextFieldDataAbastecimento.setBackground(Color.orange);
                    listaErros.append("# O Campo 'Data da manutenção' está incorreto, ex: dd/mm/aaaa. \n");
                } else {
                    try {
                        if(!isDattaVal(jTextFieldDataAbastecimento.getText().trim())){
                            jTextFieldDataAbastecimento.setBackground(Color.orange);
                            listaErros.append("# O Campo 'Data da manutenção' está incorreto, digite uma data válida menor ou igual o dia de hoje. \n");
                        } else {
                            jTextFieldDataAbastecimento.setBackground(Color.white);                    
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(ManCad.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }            
        }
        //----------------------------------------------------------------------
        //Validar custo
        if(jTextFieldPrecoLitro.getText().trim().length() < 1){
            jTextFieldPrecoLitro.setBackground(Color.orange);
            listaErros.append("# O Campo 'Custo' é obrigatório. \n");
            
        } else {
            if(!isCusto(jTextFieldPrecoLitro.getText().trim())){
                jTextFieldPrecoLitro.setBackground(Color.orange);
                listaErros.append("# O Campo 'Custo' esta incorreto, ex: 0.00 \n");
            } else {
                jTextFieldPrecoLitro.setBackground(Color.white);
            }
        }
        
        //----------------------------------------------------------------------
        //VALIDAR LITROS
        if(jTextFieldLitros.getText().trim().length() < 1){
            jTextFieldLitros.setBackground(Color.orange);
            listaErros.append("# O Campo 'Preco por litro' é obrigatório. \n");
            
        } else {
            if(!isCusto(jTextFieldLitros.getText().trim())){
                jTextFieldLitros.setBackground(Color.orange);
                listaErros.append("# O Campo 'Preco por litro' esta incorreto, ex: 0.00 \n");
            } else {
                jTextFieldLitros.setBackground(Color.white);
            }
        }
        //----------------------------------------------------------------------
        //VAlidar fornecedor
        if(this.consumo.getLocal() == null){
            jTextFieldLocalAbastecimento.setBackground(Color.orange);
            listaErros.append("# É neessário adicionar um fornecedor para este abastecimento. \n");
        } else {
            jTextFieldLocalAbastecimento.setBackground(Color.LIGHT_GRAY);
        }
        //----------------------------------------------------------------------
        
            
        if(listaErros.length() == 0){
                return true;
        }
                
        return false;
    }
    //VALIDACAO UTILS-----------------------------------------------------------
    private boolean isCusto(String auxs){
        char[] vauxs = auxs.toCharArray();
        char[] pogs = new char[auxs.length()];
        int poggs = 0;
        boolean flag = true;
        float aux2 = 0;
        
        for ( int i = vauxs.length - 1; i >= 0; i-- ){            
            pogs[poggs] = vauxs[i];
            poggs++;            
        }
        
        for ( int i = 0; i < pogs.length; i++ ){            
            if ( !Character.isDigit( pogs[ i ] ) ){
                if(i == 2){                    
                    flag = true;
                    
                    if(pogs[i] != (char) 46){
                        flag = false;
                        break;
                    }
                    
                } else {
                    flag = false;                    
                    break;
                    
                }    
            }       
        }
        /*
        for(float tx : pogs){
            System.out.println(tx);
        }
        */
        
        if(flag == true){
            aux2 = Float.valueOf(auxs);
            
            if(aux2 < 0){
                flag = false;
            }
        }
        
        return flag;
    }
    
    private boolean isNumber(String axus){
        char[] vauxs = axus.toCharArray();
        boolean flag = true;
        int aux2 = 0;
            
        for ( int i = 0; i < vauxs.length; i++ ){            
            if ( !Character.isDigit( vauxs[ i ] ) ){
                flag = false;                    
                break;
            }                
        }
        
        if(flag == true){
            aux2 = Integer.valueOf(axus);
            
            if(aux2 < 0){
                flag = false;
            }
        }
        
        
        return flag;
    }
    
    private boolean isdatta(String axus){
        char[] vauxs = axus.toCharArray();
        boolean flag = true;
        
        //System.out.println("################################################### \n");
        //System.out.println(axus);
        for ( int i = 0; i < vauxs.length; i++ ){            
            if ( !Character.isDigit( vauxs[ i ] ) ){                
                if(i == 2 || i == 5){                    
                    flag = true;
                } else {
                    flag = false;                    
                    break;
                }
            }
            //System.out.println(flag);
        }
        
        return flag;
    }
    
    private boolean isDattaVal(String axus) throws ParseException{
        Date dia = null;
        dia = new SimpleDateFormat("dd/MM/yyyy").parse(axus);
        
        Date dataAtual = new Date();
        
        int anDAt = dataAtual.getYear();
        int meDAt = dataAtual.getMonth();
        int diDAt = dataAtual.getDate();
        
        if(dia.getYear() > anDAt){
        
            return false;            
        } else {
            if(dia.getMonth() > 11) {               
                return false;
                
            } else {
                if(dia.getMonth() > meDAt && dia.getYear() == anDAt){
                    return false;    
                    
                } else {
                    if(dia.getDate()> 31){
                        return false;
                        
                    } else {                        
                        if(dia.getMonth() == 10 || dia.getMonth() == 8 || dia.getMonth() == 5 || dia.getMonth() == 3){
                            if(dia.getDate() > 30){
                                return false;

                            }                         
                        }               
                        if(dia.getMonth() == meDAt && dia.getDate() > diDAt){
                            return false;        
                            
                        } 
                    }
                }
            }
        }
        
        return true;
        
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAlterarLocal;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTextFieldCombustivel;
    private javax.swing.JTextField jTextFieldDataAbastecimento;
    private javax.swing.JTextField jTextFieldLitros;
    private javax.swing.JTextField jTextFieldLocalAbastecimento;
    private javax.swing.JTextField jTextFieldPrecoLitro;
    private javax.swing.JTextField jTextFieldQuilometragem;
    // End of variables declaration//GEN-END:variables
}
